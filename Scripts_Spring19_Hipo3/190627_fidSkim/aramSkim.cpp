//***********************************************************************
//***********************************************************************
//    ____  ____  _____  _______     ___      ______       __  
//   |_   ||   _||_   _||_   __ \  .'   `.   / ____ `.    /  | 
//     | |__| |    | |    | |__) |/  .-.  \  `'  __) |    `| |  
//     |  __  |    | |    |  ___/ | |   | |  _  |__ '.     | |  
//    _| |  | |_  _| |_  _| |_    \  `-'  / | \____) | _  _| |_  
//   |____||____||_____||_____|    `.___.'   \______.'(_)|_____| 
//
//======================================================================= 
// Autogenerated code by HIPO 3.1 io library
// Modify the main loop to suite your needs
// Date:
//***********************************************************************
#include <cstdlib>
#include <iostream>
#include<stdio.h>
#include <vector>
#include <string>
#include<TFile.h>
#include<TMath.h>
#include<TTree.h>
#include<TChain.h>
#include<TH2F.h>
#include<TF1.h>
#include<TCanvas.h>
#include<TApplication.h>
#include<TRint.h>
#include<TStyle.h>
#include <TROOT.h>
#include<string>

#include "reader.h"
#include "node.h"


#define SIZE 5000

using namespace std;

int main(int argc, char** argv) {

	char inputFile[256];

	if(argc>1) {
		sprintf(inputFile,"%s",argv[1]);
	} else {
		std::cout << " *** please provide a file name..." << std::endl;
		exit(0);
	}

	//	char in_file[80];
	//	strcpy (in_file,argv[1]);
	std::string input=inputFile;
	//      std::string rpl="root";
	std::string rpl=".root";
	//      input.replace(input.find(".evio"), sizeof(rpl)-1, rpl);
	input.replace(input.find(".hipo"), 5, rpl);
	const char *output = "test.root";
	cout<<output<<endl;
	hipo::reader  reader;
	reader.open(inputFile);


	map<int, int> ind_HTCC;
	map<int, int> ind_PCal;
	map<int, int> ind_ECin;
	map<int, int> ind_ECout;
	map<int, int> ind_Track;
	map<int, int> ind_FTOF;
	map<int, int> ind_CTOF;

	//----------------------------------------
	//---- List of banks to be used -----///
	//----------------------------------------

	hipo::node<int32_t>       *RUN__config_run = reader.getBranch<int32_t>("RUN::config","run");
	hipo::node<int32_t>       *RUN__config_event = reader.getBranch<int32_t>("RUN::config","event");
	hipo::node<int64_t>       *RUN__config_timestamp = reader.getBranch<int64_t>("RUN::config","timestamp");
	hipo::node<int64_t>       *RUN__config_trigger = reader.getBranch<int64_t>("RUN::config","trigger");

	hipo::node<float>         *REC__Event_BCG = reader.getBranch<float>("REC::Event","BCG");
	hipo::node<float>         *REC__Event_EVNTime = reader.getBranch<float>("REC::Event","EVNTime");
	hipo::node<int8_t>        *REC__Event_Helic = reader.getBranch<int8_t>("REC::Event","Helic");
	hipo::node<double>        *REC__Event_LT = reader.getBranch<double>("REC::Event","LT");
	hipo::node<float>         *REC__Event_RFTime = reader.getBranch<float>("REC::Event","RFTime");
	hipo::node<float>         *REC__Event_STTime = reader.getBranch<float>("REC::Event","STTime");
	hipo::node<int64_t>       *REC__Event_TRG = reader.getBranch<int64_t>("REC::Event","TRG");

	hipo::node<float>         *REC__Particle_beta = reader.getBranch<float>("REC::Particle","beta");
	hipo::node<int8_t>        *REC__Particle_charge = reader.getBranch<int8_t>("REC::Particle","charge");
	hipo::node<int32_t>       *REC__Particle_pid = reader.getBranch<int32_t>("REC::Particle","pid");
	hipo::node<float>         *REC__Particle_px = reader.getBranch<float>("REC::Particle","px");
	hipo::node<float>         *REC__Particle_py = reader.getBranch<float>("REC::Particle","py");
	hipo::node<float>         *REC__Particle_pz = reader.getBranch<float>("REC::Particle","pz");
	hipo::node<float>         *REC__Particle_vx = reader.getBranch<float>("REC::Particle","vx");
	hipo::node<float>         *REC__Particle_vy = reader.getBranch<float>("REC::Particle","vy");
	hipo::node<float>         *REC__Particle_vz = reader.getBranch<float>("REC::Particle","vz");
	hipo::node<int16_t>       *REC__Particle_status = reader.getBranch<int16_t>("REC::Particle","status");
	hipo::node<float>         *REC__Particle_chi2pid = reader.getBranch<float>("REC::Particle","chi2pid");

	hipo::node<int8_t>        *REC__Scintillator_detector = reader.getBranch<int8_t>("REC::Scintillator","detector");
	hipo::node<int16_t>       *REC__Scintillator_index = reader.getBranch<int16_t>("REC::Scintillator","index");
	hipo::node<int16_t>       *REC__Scintillator_pindex = reader.getBranch<int16_t>("REC::Scintillator","pindex");
	hipo::node<int16_t>       *REC__Scintillator_component = reader.getBranch<int16_t>("REC::Scintillator","component");
	hipo::node<int8_t>        *REC__Scintillator_sector = reader.getBranch<int8_t>("REC::Scintillator","sector");
	hipo::node<int8_t>        *REC__Scintillator_layer = reader.getBranch<int8_t>("REC::Scintillator","layer");
	hipo::node<float>         *REC__Scintillator_time = reader.getBranch<float>("REC::Scintillator","time");
	hipo::node<float>         *REC__Scintillator_energy = reader.getBranch<float>("REC::Scintillator","energy");
	hipo::node<float>         *REC__Scintillator_path = reader.getBranch<float>("REC::Scintillator","path");
	hipo::node<float>         *REC__Scintillator_x = reader.getBranch<float>("REC::Scintillator","x");
	hipo::node<float>         *REC__Scintillator_y = reader.getBranch<float>("REC::Scintillator","y");
	hipo::node<float>         *REC__Scintillator_z = reader.getBranch<float>("REC::Scintillator","z");

	hipo::node<int8_t>        *REC__Cherenkov_detector = reader.getBranch<int8_t>("REC::Cherenkov","detector");
	hipo::node<int16_t>       *REC__Cherenkov_index = reader.getBranch<int16_t>("REC::Cherenkov","index");
	hipo::node<int16_t>       *REC__Cherenkov_pindex = reader.getBranch<int16_t>("REC::Cherenkov","pindex");
	hipo::node<float>         *REC__Cherenkov_nphe = reader.getBranch<float>("REC::Cherenkov","nphe");
	hipo::node<float>         *REC__Cherenkov_time = reader.getBranch<float>("REC::Cherenkov","time");

	hipo::node<int8_t>        *REC__Calorimeter_detector = reader.getBranch<int8_t>("REC::Calorimeter","detector");
	hipo::node<int16_t>       *REC__Calorimeter_index = reader.getBranch<int16_t>("REC::Calorimeter","index");
	hipo::node<int16_t>       *REC__Calorimeter_pindex = reader.getBranch<int16_t>("REC::Calorimeter","pindex");
	hipo::node<int8_t>        *REC__Calorimeter_layer = reader.getBranch<int8_t>("REC::Calorimeter","layer");
	hipo::node<float>         *REC__Calorimeter_energy = reader.getBranch<float>("REC::Calorimeter","energy");
	hipo::node<float>         *REC__Calorimeter_time = reader.getBranch<float>("REC::Calorimeter","time");
	hipo::node<float>         *REC__Calorimeter_path = reader.getBranch<float>("REC::Calorimeter","path");
	hipo::node<int8_t>        *REC__Calorimeter_sector = reader.getBranch<int8_t>("REC::Calorimeter","sector");
	hipo::node<float>         *REC__Calorimeter_lu = reader.getBranch<float>("REC::Calorimeter","lu");
	hipo::node<float>         *REC__Calorimeter_lv = reader.getBranch<float>("REC::Calorimeter","lv");
	hipo::node<float>         *REC__Calorimeter_lw = reader.getBranch<float>("REC::Calorimeter","lw");
	hipo::node<float>         *REC__Calorimeter_x = reader.getBranch<float>("REC::Calorimeter","x");
	hipo::node<float>         *REC__Calorimeter_y = reader.getBranch<float>("REC::Calorimeter","y");
	hipo::node<float>         *REC__Calorimeter_z = reader.getBranch<float>("REC::Calorimeter","z");
	hipo::node<float>         *REC__Calorimeter_hx = reader.getBranch<float>("REC::Calorimeter","hx");
	hipo::node<float>         *REC__Calorimeter_hy = reader.getBranch<float>("REC::Calorimeter","hy");
	hipo::node<float>         *REC__Calorimeter_hz = reader.getBranch<float>("REC::Calorimeter","hz");

	hipo::node<int8_t>        *REC__Track_detector = reader.getBranch<int8_t>("REC::Track","detector");
	hipo::node<int16_t>       *REC__Track_index = reader.getBranch<int16_t>("REC::Track","index");
	hipo::node<int16_t>       *REC__Track_pindex = reader.getBranch<int16_t>("REC::Track","pindex");
	hipo::node<int8_t>        *REC__Track_sector = reader.getBranch<int8_t>("REC::Track","sector");
	hipo::node<float>         *REC__Track_chi2 = reader.getBranch<float>("REC::Track","chi2");

	hipo::node<int16_t>       *REC__Traj_pindex = reader.getBranch<int16_t>("REC::Traj","pindex");
	hipo::node<int16_t>       *REC__Traj_detId = reader.getBranch<int16_t>("REC::Traj","detId");
	hipo::node<float>         *REC__Traj_x = reader.getBranch<float>("REC::Traj","x");
	hipo::node<float>         *REC__Traj_y = reader.getBranch<float>("REC::Traj","y");
	hipo::node<float>         *REC__Traj_z = reader.getBranch<float>("REC::Traj","z");
	//   hipo::node<float>         *REC__Traj_cx = reader.getBranch<float>("REC::Traj","cx");
	//   hipo::node<float>         *REC__Traj_cy = reader.getBranch<float>("REC::Traj","cy");
	//   hipo::node<float>         *REC__Traj_cz = reader.getBranch<float>("REC::Traj","cz");

	/*
	   hipo::node<float>	      *RICH__clusters_charge = reader.getBranch<float>("RICH::clusters","charge");
	   hipo::node<int16_t>        *RICH__clusters_id = reader.getBranch<int16_t>("RICH::clusters","id");
	   hipo::node<int16_t>        *RICH__clusters_pmt = reader.getBranch<int16_t>("RICH::clusters","pmt");
	   hipo::node<int16_t>        *RICH__clusters_sector = reader.getBranch<int16_t>("RICH::clusters","sector");
	   hipo::node<int16_t>        *RICH__clusters_size = reader.getBranch<int16_t>("RICH::clusters","size");
	   hipo::node<int16_t>        *RICH__clusters_tile = reader.getBranch<int16_t>("RICH::clusters","tile");
	   hipo::node<float>          *RICH__clusters_time = reader.getBranch<float>("RICH::clusters","time");
	   hipo::node<float>          *RICH__clusters_wtime = reader.getBranch<float>("RICH::clusters","wtime");
	   hipo::node<float>          *RICH__clusters_wx = reader.getBranch<float>("RICH::clusters","wx");
	   hipo::node<float>          *RICH__clusters_wy = reader.getBranch<float>("RICH::clusters","wy");
	   hipo::node<float>          *RICH__clusters_wz = reader.getBranch<float>("RICH::clusters","wz");
	   hipo::node<float>          *RICH__clusters_x = reader.getBranch<float>("RICH::clusters","x");
	   hipo::node<float>          *RICH__clusters_y = reader.getBranch<float>("RICH::clusters","y");
	   hipo::node<float>          *RICH__clusters_z = reader.getBranch<float>("RICH::clusters","z");

	   hipo::node<int16_t>        *RICH__hits_anode = reader.getBranch<int16_t>("RICH::hits","anode");
	   hipo::node<int16_t>        *RICH__hits_cluster = reader.getBranch<int16_t>("RICH::hits","cluster");
	   hipo::node<int16_t>        *RICH__hits_duration = reader.getBranch<int16_t>("RICH::hits","duration");
	   hipo::node<int16_t>        *RICH__hits_glx = reader.getBranch<int16_t>("RICH::hits","glx");
	   hipo::node<int16_t>        *RICH__hits_gly = reader.getBranch<int16_t>("RICH::hits","gly");
	   hipo::node<int16_t>        *RICH__hits_id = reader.getBranch<int16_t>("RICH::hits","id");
	   hipo::node<int16_t>        *RICH__hits_idx = reader.getBranch<int16_t>("RICH::hits","idx");
	   hipo::node<int16_t>        *RICH__hits_idy = reader.getBranch<int16_t>("RICH::hits","idy");
	   hipo::node<int16_t>        *RICH__hits_pmt = reader.getBranch<int16_t>("RICH::hits","pmt");
	   hipo::node<int16_t>        *RICH__hits_sector = reader.getBranch<int16_t>("RICH::hits","sector");
	   hipo::node<int16_t>        *RICH__hits_tile = reader.getBranch<int16_t>("RICH::hits","tile");
	   hipo::node<int16_t>        *RICH__hits_time = reader.getBranch<int16_t>("RICH::hits","time");
	   hipo::node<int16_t>        *RICH__hits_xtalk = reader.getBranch<int16_t>("RICH::hits","xtalk");


	   hipo::node<float>          *RICH__newclusters_charge = reader.getBranch<float>("RICH::newclusters","charge");
	   hipo::node<int16_t>        *RICH__newclusters_id = reader.getBranch<int16_t>("RICH::newclusters","id");
	   hipo::node<int16_t>        *RICH__newclusters_pmt = reader.getBranch<int16_t>("RICH::newclusters","pmt");
	   hipo::node<int16_t>        *RICH__newclusters_sector = reader.getBranch<int16_t>("RICH::newclusters","sector");
	   hipo::node<int16_t>        *RICH__newclusters_size = reader.getBranch<int16_t>("RICH::newclusters","size");
	   hipo::node<int16_t>        *RICH__newclusters_tile = reader.getBranch<int16_t>("RICH::newclusters","tile");
	   hipo::node<float>          *RICH__newclusters_time = reader.getBranch<float>("RICH::newclusters","time");
	   hipo::node<float>          *RICH__newclusters_wtime = reader.getBranch<float>("RICH::newclusters","wtime");
	   hipo::node<float>          *RICH__newclusters_wx = reader.getBranch<float>("RICH::newclusters","wx");
	   hipo::node<float>          *RICH__newclusters_wy = reader.getBranch<float>("RICH::newclusters","wy");
	   hipo::node<float>          *RICH__newclusters_wz = reader.getBranch<float>("RICH::newclusters","wz");
	   hipo::node<float>          *RICH__newclusters_x = reader.getBranch<float>("RICH::newclusters","x");
	   hipo::node<float>          *RICH__newclusters_y = reader.getBranch<float>("RICH::newclusters","y");
	   hipo::node<float>          *RICH__newclusters_z = reader.getBranch<float>("RICH::newclusters","z");

	   hipo::node<int16_t>        *RICH__newhits_anode = reader.getBranch<int16_t>("RICH::newhits","anode");
	   hipo::node<int16_t>        *RICH__newhits_cluster = reader.getBranch<int16_t>("RICH::newhits","cluster");
	   hipo::node<int16_t>        *RICH__newhits_duration = reader.getBranch<int16_t>("RICH::newhits","duration");
	   hipo::node<int16_t>        *RICH__newhits_glx = reader.getBranch<int16_t>("RICH::newhits","glx");
	   hipo::node<int16_t>        *RICH__newhits_gly = reader.getBranch<int16_t>("RICH::newhits","gly");
	   hipo::node<int16_t>        *RICH__newhits_id = reader.getBranch<int16_t>("RICH::newhits","id");
	   hipo::node<int16_t>        *RICH__newhits_idx = reader.getBranch<int16_t>("RICH::newhits","idx");
	   hipo::node<int16_t>        *RICH__newhits_idy = reader.getBranch<int16_t>("RICH::newhits","idy");
	   hipo::node<int16_t>        *RICH__newhits_pmt = reader.getBranch<int16_t>("RICH::newhits","pmt");
	   hipo::node<int16_t>        *RICH__newhits_sector = reader.getBranch<int16_t>("RICH::newhits","sector");
	   hipo::node<int16_t>        *RICH__newhits_tile = reader.getBranch<int16_t>("RICH::newhits","tile");
	   hipo::node<float>          *RICH__newhits_time = reader.getBranch<float>("RICH::newhits","time");
	   hipo::node<int16_t>        *RICH__newhits_xtalk = reader.getBranch<int16_t>("RICH::newhits","xtalk");
	   hipo::node<float>          *RICH__newhits_x = reader.getBranch<float>("RICH::newhits","x");
	   hipo::node<float>          *RICH__newhits_y = reader.getBranch<float>("RICH::newhits","y");
	   hipo::node<float>          *RICH__newhits_z = reader.getBranch<float>("RICH::newhits","z");


	   hipo::node<int16_t>        *REC__RICH_index = reader.getBranch<int16_t>("REC::RICH","index");
	   hipo::node<int16_t>        *REC__RICH_pindex = reader.getBranch<int16_t>("REC::RICH","pindex");
	   hipo::node<int8_t>         *REC__RICH_detector = reader.getBranch<int8_t>("REC::RICH","detector");
	   hipo::node<int8_t>         *REC__RICH_sector = reader.getBranch<int8_t>("REC::RICH","sector");
	   hipo::node<int8_t>         *REC__RICH_layer = reader.getBranch<int8_t>("REC::RICH","layer");
	   hipo::node<float>          *REC__RICH_energy = reader.getBranch<float>("REC::RICH","energy");
	   hipo::node<float>          *REC__RICH_time = reader.getBranch<float>("REC::RICH","time");
	hipo::node<float>          *REC__RICH_path = reader.getBranch<float>("REC::RICH","path");
	hipo::node<float>          *REC__RICH_chi2 = reader.getBranch<float>("REC::RICH","chi2");
	hipo::node<float>          *REC__RICH_x = reader.getBranch<float>("REC::RICH","x");
	hipo::node<float>          *REC__RICH_y = reader.getBranch<float>("REC::RICH","y");
	hipo::node<float>          *REC__RICH_z = reader.getBranch<float>("REC::RICH","z");
	hipo::node<float>          *REC__RICH_hx = reader.getBranch<float>("REC::RICH","hx");
	hipo::node<float>          *REC__RICH_hy = reader.getBranch<float>("REC::RICH","hy");
	hipo::node<float>          *REC__RICH_hz = reader.getBranch<float>("REC::RICH","hz");
	hipo::node<int16_t>        *REC__RICH_status = reader.getBranch<int16_t>("REC::RICH","status");

	hipo::node<int16_t>        *RICH__photons_type = reader.getBranch<int16_t>("RICH::photons","type");
	hipo::node<float>          *RICH__photons_start_time = reader.getBranch<float>("RICH::photons","start_time");
	hipo::node<float>          *RICH__photons_migrad_time = reader.getBranch<float>("RICH::photons","migrad_time");
	hipo::node<int16_t>        *RICH__photons_hit_index = reader.getBranch<int16_t>("RICH::photons","hit_index");
	hipo::node<float>          *RICH__photons_hit_time = reader.getBranch<float>("RICH::photons","hit_time");
	*/
		//----------------------------------------------------
		// Declare output info for the ROOT file
		//----------------------------------------------------

		int i_part;

	Long64_t run;
	Long64_t event;
	Long64_t tstamp;
	Long64_t trig;

	int helic;
	long ttype;
	float fcup;
	float start_time;
	float rf_time;
	double clock;
	float ev_time;

	int npart=0;
	int charge[SIZE];
	float px[SIZE],py[SIZE],pz[SIZE];
	float vx[SIZE],vy[SIZE],vz[SIZE];
	float beta[SIZE];
	int pid[SIZE];
	int status[SIZE];
	float chi2pid[SIZE];

	int ftof_sect[SIZE];
	int ftof_pad[SIZE];
	int ftof_lay[SIZE];
	float ftof_ene[SIZE];
	float ftof_time[SIZE];
	float ftof_path[SIZE];
	float ftof_x[SIZE];
	float ftof_y[SIZE];
	float ftof_z[SIZE];
	int ftof_sect1[SIZE];
	int ftof_pad1[SIZE];
	int ftof_lay1[SIZE];
	float ftof_ene1[SIZE];
	float ftof_time1[SIZE];
	float ftof_path1[SIZE];
	float ftof_x1[SIZE];
	float ftof_y1[SIZE];
	float ftof_z1[SIZE];
	int ftof_sect2[SIZE];
	int ftof_pad2[SIZE];
	int ftof_lay2[SIZE];
	float ftof_ene2[SIZE];
	float ftof_time2[SIZE];
	float ftof_path2[SIZE];
	float ftof_x2[SIZE];
	float ftof_y2[SIZE];
	float ftof_z2[SIZE];
	int ftof_sect3[SIZE];
	int ftof_pad3[SIZE];
	int ftof_lay3[SIZE];
	float ftof_ene3[SIZE];
	float ftof_time3[SIZE];
	float ftof_path3[SIZE];
	float ftof_x3[SIZE];
	float ftof_y3[SIZE];
	float ftof_z3[SIZE];
	int ctof_sect[SIZE];
	int ctof_pad[SIZE];
	int ctof_lay[SIZE];
	float ctof_ene[SIZE];
	float ctof_time[SIZE];
	float ctof_path[SIZE];
	float ctof_x[SIZE];
	float ctof_y[SIZE];
	float ctof_z[SIZE];

	float nphe[SIZE];
	float htcc_time[SIZE];

	int pcal_sect[SIZE];
	float pcal_e[SIZE];
	float pcal_path[SIZE];
	float pcal_time[SIZE];
	float pcal_u[SIZE],pcal_v[SIZE],pcal_w[SIZE];
	float pcal_x[SIZE],pcal_y[SIZE],pcal_z[SIZE];
	float pcal_hx[SIZE],pcal_hy[SIZE],pcal_hz[SIZE];

	float ecin_e[SIZE];
	//	float ecin_u[SIZE],ecin_v[SIZE],ecin_w[SIZE];
	//	float ecin_x[SIZE],ecin_y[SIZE],ecin_z[SIZE];

	float ecout_e[SIZE];
	//	float ecout_u[SIZE],ecout_v[SIZE],ecout_w[SIZE];
	//	float ecout_x[SIZE],ecout_y[SIZE],ecout_z[SIZE];

	long dc_sect[SIZE];
	float chi2[SIZE];

	float tr_c1x[SIZE];
	float tr_c1y[SIZE];
	float tr_c1z[SIZE];
	float tr_c3x[SIZE];
	float tr_c3y[SIZE];
	float tr_c3z[SIZE];
	float tr_dcx[SIZE];
	float tr_dcy[SIZE];
	float tr_dcz[SIZE];
	float tr_tofx[SIZE];
	float tr_tofy[SIZE];
	float tr_tofz[SIZE];
	float tr_pcalx[SIZE];
	float tr_pcaly[SIZE];
	float tr_pcalz[SIZE];


	int nrich;
	int nricc;

	int ricc_id[SIZE];
	int ricc_size[SIZE];
	int ricc_sector[SIZE];
	int ricc_tile[SIZE];
	int ricc_pmt[SIZE];
	float ricc_charge[SIZE];
	float ricc_time[SIZE];
	float ricc_x[SIZE];
	float ricc_y[SIZE];
	float ricc_z[SIZE];
	float ricc_wtime[SIZE];
	float ricc_wx[SIZE];
	float ricc_wy[SIZE];
	float ricc_wz[SIZE];

	int rich_id[SIZE];
	int rich_sector[SIZE];
	int rich_tile[SIZE];
	int rich_pmt[SIZE];
	int rich_anode[SIZE];
	int rich_idx[SIZE];
	int rich_idy[SIZE];
	int rich_glx[SIZE];
	int rich_gly[SIZE];
	int rich_time[SIZE];
	int rich_duration[SIZE];
	int rich_cluster[SIZE];
	int rich_xtalk[SIZE];

	int new_nrich;
	int new_nricc;

	int ricc_newid[SIZE];
	int ricc_newsize[SIZE];
	int ricc_newsector[SIZE];
	int ricc_newtile[SIZE];
	int ricc_newpmt[SIZE];
	float ricc_newcharge[SIZE];
	float ricc_newtime[SIZE];
	float ricc_newx[SIZE];
	float ricc_newy[SIZE];
	float ricc_newz[SIZE];
	float ricc_newwtime[SIZE];
	float ricc_newwx[SIZE];
	float ricc_newwy[SIZE];
	float ricc_newwz[SIZE];

	int rich_newid[SIZE];
	int rich_newsector[SIZE];
	int rich_newtile[SIZE];
	int rich_newpmt[SIZE];
	int rich_newanode[SIZE];
	int rich_newidx[SIZE];
	int rich_newidy[SIZE];
	int rich_newglx[SIZE];
	int rich_newgly[SIZE];
	float rich_newtime[SIZE];
	int rich_newduration[SIZE];
	int rich_newcluster[SIZE];
	int rich_newxtalk[SIZE];
	float rich_newx[SIZE];
	float rich_newy[SIZE];
	float rich_newz[SIZE];

	int r_nrich;
	int r_index[SIZE];
	int r_pindex[SIZE];
	int r_detector[SIZE];
	int r_sector[SIZE];
	int r_layer[SIZE];
	float r_energy[SIZE];
	float r_time[SIZE];
	float r_path[SIZE];
	float r_chi2[SIZE];
	float r_x[SIZE];
	float r_y[SIZE];
	float r_z[SIZE];
	float r_hx[SIZE];
	float r_hy[SIZE];
	float r_hz[SIZE];
	int r_status[SIZE];

	int r_nphotons;
	int r_type[SIZE];
	int r_hit_index[SIZE];
	float r_start_time[SIZE];
	float r_migrad_time[SIZE];
	float r_hit_time[SIZE];


	//	TFile *c = new TFile("test.root","recreate");
	TFile *c = new TFile(output,"recreate");
	TTree *ht = new TTree("ht","ht");


	ht->Branch("run",&run,"run/L");
	ht->Branch("event",&event,"event/L");
	ht->Branch("tstamp",&tstamp,"tstamp/L");
	ht->Branch("trig",&trig,"trig/L");

	ht->Branch("helic",&helic,"helic/I");
	ht->Branch("ttype",&ttype,"ttype/L");
	ht->Branch("fcup",&fcup,"fcup/F");
	ht->Branch("start_time",&start_time,"start_time/F");
	ht->Branch("rf_time",&rf_time,"rf_time/F");
	ht->Branch("clock",&clock,"clock/D");
	ht->Branch("ev_time",&ev_time,"ev_time/F");

	ht->Branch("npart",&npart,"npart/I");
	ht->Branch("px",&px,"px[npart]/F");
	ht->Branch("py",&py,"py[npart]/F");
	ht->Branch("pz",&pz,"pz[npart]/F");
	ht->Branch("vx",&vx,"vx[npart]/F");
	ht->Branch("vy",&vy,"vy[npart]/F");
	ht->Branch("vz",&vz,"vz[npart]/F");
	ht->Branch("charge",&charge,"charge[npart]/I");
	ht->Branch("pid",&pid,"pid[npart]/I");
	ht->Branch("beta",&beta,"beta[npart]/F");
	ht->Branch("status",&status,"status[npart]/I");
	ht->Branch("chi2pid",&chi2pid,"chi2pid[npart]/F");

	ht->Branch("ftof_sect1",&ftof_sect1,"ftof_sect1[npart]/I");
	ht->Branch("ftof_pad1",&ftof_pad1,"ftof_pad1[npart]/I");
	ht->Branch("ftof_time1",&ftof_time1,"ftof_time1[npart]/F");
	ht->Branch("ftof_path1",&ftof_path1,"ftof_path1[npart]/F");
	ht->Branch("ftof_x1",&ftof_x1,"ftof_x1[npart]/F");
	ht->Branch("ftof_y1",&ftof_y1,"ftof_y1[npart]/F");
	ht->Branch("ftof_z1",&ftof_z1,"ftof_z1[npart]/F");

	ht->Branch("ftof_sect2",&ftof_sect2,"ftof_sect2[npart]/I");
	ht->Branch("ftof_pad2",&ftof_pad2,"ftof_pad2[npart]/I");
	ht->Branch("ftof_time2",&ftof_time2,"ftof_time2[npart]/F");
	ht->Branch("ftof_path2",&ftof_path2,"ftof_path2[npart]/F");
	ht->Branch("ftof_x2",&ftof_x2,"ftof_x2[npart]/F");
	ht->Branch("ftof_y2",&ftof_y2,"ftof_y2[npart]/F");
	ht->Branch("ftof_z2",&ftof_z2,"ftof_z2[npart]/F");

	ht->Branch("ftof_sect3",&ftof_sect3,"ftof_sect3[npart]/I");
	ht->Branch("ftof_pad3",&ftof_pad3,"ftof_pad3[npart]/I");
	ht->Branch("ftof_time3",&ftof_time3,"ftof_time3[npart]/F");
	ht->Branch("ftof_path3",&ftof_path3,"ftof_path3[npart]/F");
	ht->Branch("ftof_x3",&ftof_x3,"ftof_x3[npart]/F");
	ht->Branch("ftof_y3",&ftof_y3,"ftof_y3[npart]/F");
	ht->Branch("ftof_z3",&ftof_z3,"ftof_z3[npart]/F");

	ht->Branch("ctof_sect",&ctof_sect,"ctof_sect[npart]/I");
	ht->Branch("ctof_pad",&ctof_pad,"ctof_pad[npart]/I");
	ht->Branch("ctof_time",&ctof_time,"ctof_time[npart]/F");
	ht->Branch("ctof_path",&ctof_path,"ctof_path[npart]/F");
	ht->Branch("ctof_x",&ctof_x,"ctof_x[npart]/F");
	ht->Branch("ctof_y",&ctof_y,"ctof_y[npart]/F");
	ht->Branch("ctof_z",&ctof_z,"ctof_z[npart]/F");

	ht->Branch("nphe",&nphe,"nphe[npart]/F");
	ht->Branch("htcc_time",&htcc_time,"htcc_time[npart]/F");

	ht->Branch("pcal_sect",&pcal_sect,"pcal_sect[npart]/I");
	ht->Branch("pcal_time",&pcal_time,"pcal_time[npart]/F");
	ht->Branch("pcal_path",&pcal_path,"pcal_path[npart]/F");
	ht->Branch("pcal_e",&pcal_e,"pcal_e[npart]/F");
	ht->Branch("pcal_u",&pcal_u,"pcal_u[npart]/F");
	ht->Branch("pcal_v",&pcal_v,"pcal_v[npart]/F");
	ht->Branch("pcal_w",&pcal_w,"pcal_w[npart]/F");
	ht->Branch("pcal_x",&pcal_x,"pcal_x[npart]/F");
	ht->Branch("pcal_y",&pcal_y,"pcal_y[npart]/F");
	ht->Branch("pcal_z",&pcal_z,"pcal_z[npart]/F");
	ht->Branch("pcal_hx",&pcal_hx,"pcal_hx[npart]/F");
	ht->Branch("pcal_hy",&pcal_hy,"pcal_hy[npart]/F");
	ht->Branch("pcal_hz",&pcal_hz,"pcal_hz[npart]/F");

	ht->Branch("ecin_e",&ecin_e,"ecin_e[npart]/F");

	ht->Branch("ecout_e",&ecout_e,"ecout_e[npart]/F");

	ht->Branch("dc_sect",&dc_sect,"dc_sect[npart]/L");
	ht->Branch("chi2",&chi2,"chi2[npart]/F");

	ht->Branch("tr_c1x",&tr_c1x,"tr_c1x[npart]/F");
	ht->Branch("tr_c1y",&tr_c1y,"tr_c1y[npart]/F");
	ht->Branch("tr_c1z",&tr_c1z,"tr_c1z[npart]/F");
	ht->Branch("tr_c3x",&tr_c3x,"tr_c3x[npart]/F");
	ht->Branch("tr_c3y",&tr_c3y,"tr_c3y[npart]/F");
	ht->Branch("tr_c3z",&tr_c3z,"tr_c3z[npart]/F");
	ht->Branch("tr_dcx",&tr_dcx,"tr_dcx[npart]/F");
	ht->Branch("tr_dcy",&tr_dcy,"tr_dcy[npart]/F");
	ht->Branch("tr_dcz",&tr_dcz,"tr_dcz[npart]/F");
	ht->Branch("tr_tofx",&tr_tofx,"tr_tofx[npart]/F");
	ht->Branch("tr_tofy",&tr_tofy,"tr_tofy[npart]/F");
	ht->Branch("tr_tofz",&tr_tofz,"tr_tofz[npart]/F");
	ht->Branch("tr_pcalx",&tr_pcalx,"tr_pcalx[npart]/F");
	ht->Branch("tr_pcaly",&tr_pcaly,"tr_pcaly[npart]/F");
	ht->Branch("tr_pcalz",&tr_pcalz,"tr_pcalz[npart]/F");

	/*
	   ht->Branch("nrich",&nrich,"nrich/I");
	   ht->Branch("rich_id",&rich_id,"rich_id[nrich]/I");
	   ht->Branch("rich_sector",&rich_sector,"rich_sector[nrich]/I");
	   ht->Branch("rich_tile",&rich_tile,"rich_tile[nrich]/I");
	   ht->Branch("rich_pmt",&rich_pmt,"rich_pmt[nrich]/I");
	   ht->Branch("rich_anode",&rich_anode,"rich_anode[nrich]/I");
	   ht->Branch("rich_idx",&rich_idx,"rich_idx[nrich]/I");
	   ht->Branch("rich_idy",&rich_idy,"rich_idy[nrich]/I");
	   ht->Branch("rich_glx",&rich_glx,"rich_glx[nrich]/I");
	   ht->Branch("rich_gly",&rich_gly,"rich_gly[nrich]/I");
	   ht->Branch("rich_time",&rich_time,"rich_time[nrich]/I");
	   ht->Branch("rich_duration",&rich_duration,"rich_duration[nrich]/I");
	   ht->Branch("rich_cluster",&rich_cluster,"rich_cluster[nrich]/I");
	   ht->Branch("rich_xtalk",&rich_xtalk,"rich_xtalk[nrich]/I");

	   ht->Branch("nricc",&nricc,"nricc/I");
	   ht->Branch("ricc_id",&ricc_id,"ricc_id[nricc]/I");
	   ht->Branch("ricc_size",&ricc_size,"ricc_size[nricc]/I");
	   ht->Branch("ricc_sector",&ricc_sector,"ricc_sector[nricc]/I");
	   ht->Branch("ricc_tile",&ricc_tile,"ricc_tile[nricc]/I");
	   ht->Branch("ricc_pmt",&ricc_pmt,"ricc_pmt[nricc]/I");
	   ht->Branch("ricc_charge",&ricc_charge,"ricc_charge[nricc]/F");
	   ht->Branch("ricc_time",&ricc_time,"ricc_time[nricc]/F");
	   ht->Branch("ricc_x",&ricc_x,"ricc_x[nricc]/F");
	   ht->Branch("ricc_y",&ricc_y,"ricc_y[nricc]/F");
	   ht->Branch("ricc_z",&ricc_z,"ricc_z[nricc]/F");
	   ht->Branch("ricc_wtime",&ricc_wtime,"ricc_wtime[nricc]/F");
	   ht->Branch("ricc_wx",&ricc_wx,"ricc_wx[nricc]/F");
	   ht->Branch("ricc_wy",&ricc_wy,"ricc_wy[nricc]/F");
	   ht->Branch("ricc_wz",&ricc_wz,"ricc_wz[nricc]/F");

	   ht->Branch("new_nrich",&new_nrich,"new_nrich/I");
	   ht->Branch("rich_newid",&rich_newid,"rich_newid[new_nrich]/I");
	   ht->Branch("rich_newsector",&rich_newsector,"rich_newsector[new_nrich]/I");
	   ht->Branch("rich_newtile",&rich_newtile,"rich_newtile[new_nrich]/I");
	   ht->Branch("rich_newpmt",&rich_newpmt,"rich_newpmt[new_nrich]/I");
	   ht->Branch("rich_newanode",&rich_newanode,"rich_newanode[new_nrich]/I");
	   ht->Branch("rich_newidx",&rich_newidx,"rich_newidx[new_nrich]/I");
	   ht->Branch("rich_newidy",&rich_newidy,"rich_newidy[new_nrich]/I");
	   ht->Branch("rich_newglx",&rich_newglx,"rich_newglx[new_nrich]/I");
	   ht->Branch("rich_newgly",&rich_newgly,"rich_newgly[new_nrich]/I");
	   ht->Branch("rich_newtime",&rich_newtime,"rich_newtime[new_nrich]/F");
	   ht->Branch("rich_newduration",&rich_newduration,"rich_newduration[new_nrich]/I");
	   ht->Branch("rich_newcluster",&rich_newcluster,"rich_newcluster[new_nrich]/I");
	   ht->Branch("rich_newxtalk",&rich_newxtalk,"rich_newxtalk[new_nrich]/I");
	   ht->Branch("rich_newx",&rich_newx,"rich_newx[new_nrich]/F");
	   ht->Branch("rich_newy",&rich_newy,"rich_newy[new_nrich]/F");
	   ht->Branch("rich_newz",&rich_newz,"rich_newz[new_nrich]/F");

	   ht->Branch("new_nricc",&new_nricc,"new_nricc/I");
	   ht->Branch("ricc_newid",&ricc_newid,"ricc_newid[new_nricc]/I");
	   ht->Branch("ricc_newsize",&ricc_newsize,"ricc_newsize[new_nricc]/I");
	   ht->Branch("ricc_newsector",&ricc_newsector,"ricc_newsector[new_nricc]/I");
	   ht->Branch("ricc_newtile",&ricc_newtile,"ricc_newtile[new_nricc]/I");
	   ht->Branch("ricc_newpmt",&ricc_newpmt,"ricc_newpmt[new_nricc]/I");
	   ht->Branch("ricc_newcharge",&ricc_newcharge,"ricc_newcharge[new_nricc]/F");
	   ht->Branch("ricc_newtime",&ricc_newtime,"ricc_newtime[new_nricc]/F");
	   ht->Branch("ricc_newx",&ricc_newx,"ricc_newx[new_nricc]/F");
	   ht->Branch("ricc_newy",&ricc_newy,"ricc_newy[new_nricc]/F");
	   ht->Branch("ricc_newz",&ricc_newz,"ricc_newz[new_nricc]/F");
	   ht->Branch("ricc_newwtime",&ricc_newwtime,"ricc_newwtime[new_nricc]/F");
	   ht->Branch("ricc_newwx",&ricc_newwx,"ricc_newwx[new_nricc]/F");
	   ht->Branch("ricc_newwy",&ricc_newwy,"ricc_newwy[new_nricc]/F");
	   ht->Branch("ricc_newwz",&ricc_newwz,"ricc_newwz[new_nricc]/F");


	   ht->Branch("r_nrich",&r_nrich,"r_nrich/I");
	   ht->Branch("r_index",&r_index,"r_index[r_nrich]/I");
	   ht->Branch("r_pindex",&r_pindex,"r_pindex[r_nrich]/I");
	   ht->Branch("r_detector",&r_detector,"r_detector[r_nrich]/I");
	ht->Branch("r_sector",&r_sector,"r_sector[r_nrich]/I");
	ht->Branch("r_layer",&r_layer,"r_layer[r_nrich]/I");
	ht->Branch("r_energy",&r_energy,"r_energy[r_nrich]/F");
	ht->Branch("r_time",&r_time,"r_time[r_nrich]/F");
	ht->Branch("r_path",&r_path,"r_path[r_nrich]/F");
	ht->Branch("r_chi2",&r_chi2,"r_chi2[r_nrich]/F");
	ht->Branch("r_x",&r_x,"r_x[r_nrich]/F");
	ht->Branch("r_y",&r_y,"r_y[r_nrich]/F");
	ht->Branch("r_z",&r_z,"r_z[r_nrich]/F");
	ht->Branch("r_hx",&r_hx,"r_hx[r_nrich]/F");
	ht->Branch("r_hy",&r_hy,"r_hy[r_nrich]/F");
	ht->Branch("r_hz",&r_hz,"r_hz[r_nrich]/F");
	ht->Branch("r_status",&r_status,"r_status[r_nrich]/I");

	ht->Branch("r_nphotons",&r_nphotons,"r_nphotons/I");
	ht->Branch("r_hit_index",&r_hit_index,"r_hit_index[r_nphotons]/I");
	ht->Branch("r_type",&r_type,"r_type[r_nphotons]/I");
	ht->Branch("r_start_time",&r_start_time,"r_start_time[r_nphotons]/F");
	ht->Branch("r_migrad_time",&r_migrad_time,"r_migrad_time[r_nphotons]/F");
	ht->Branch("r_hit_time",&r_hit_time,"r_hit_time[r_nphotons]/F");
	*/

		const double scale_PCal_coord = 1./6.5;
	const double scale_EC_coord = 1./8.;
	int dum_ftof=0;
	int dum_ctof=0;
	int charged_tracks=0;


	//----------------------------------------------------
	//--  Main LOOP running through events and printing
	//--  values of the first decalred branch
	//----------------------------------------------------
	int entry = 0;
	while(reader.next()==true){
		entry++;

		npart=REC__Particle_px->getLength();
		run=RUN__config_run->getValue(0);
		event=RUN__config_event->getValue(0);
		tstamp=RUN__config_timestamp->getValue(0);
		trig=RUN__config_trigger->getValue(0);

		if(REC__Event_TRG->getLength()>0){
			ttype=REC__Event_TRG->getValue(0);
			fcup=REC__Event_BCG->getValue(0);
			helic=REC__Event_Helic->getValue(0);
			start_time=REC__Event_STTime->getValue(0);
			rf_time=REC__Event_RFTime->getValue(0);
			ev_time=REC__Event_EVNTime->getValue(0);
			clock=REC__Event_LT->getValue(0);
		}

		// First loop over number of particles to
		// determine the links for detector banks
		if(npart<100){
			charged_tracks=0;
			for( i_part=0; i_part<npart; i_part++){

				px[i_part]=0;
				py[i_part]=0;
				pz[i_part]=0;
				vx[i_part]=0;
				vy[i_part]=0;
				vz[i_part]=0;
				px[i_part]=0;
				charge[i_part]=0;
				pid[i_part]=0;
				beta[i_part]=0;
				status[i_part]=0;

				nphe[i_part]=-1;
				htcc_time[i_part]=0;

				ftof_sect1[i_part]=0;
				ftof_pad1[i_part]=0;
				ftof_time1[i_part]=0;
				ftof_path1[i_part]=0;
				ftof_x1[i_part]=0;
				ftof_y1[i_part]=0;
				ftof_z1[i_part]=0;
				ftof_sect2[i_part]=0;
				ftof_pad2[i_part]=0;
				ftof_time2[i_part]=0;
				ftof_path2[i_part]=0;
				ftof_x2[i_part]=0;
				ftof_y2[i_part]=0;
				ftof_z2[i_part]=0;
				ftof_sect3[i_part]=0;
				ftof_pad3[i_part]=0;
				ftof_time3[i_part]=0;
				ftof_path3[i_part]=0;
				ftof_x3[i_part]=0;
				ftof_y3[i_part]=0;
				ftof_z3[i_part]=0;
				ctof_sect[i_part]=0;
				ctof_pad[i_part]=0;
				ctof_time[i_part]=0;
				ctof_path[i_part]=0;
				ctof_x[i_part]=0;
				ctof_y[i_part]=0;
				ctof_z[i_part]=0;

				pcal_e[i_part]=0;
				pcal_sect[i_part]=0;
				pcal_time[i_part]=0;
				pcal_path[i_part]=0;
				pcal_u[i_part]=0;
				pcal_v[i_part]=0;
				pcal_w[i_part]=0;
				pcal_x[i_part]=0;
				pcal_y[i_part]=0;
				pcal_z[i_part]=0;
				pcal_hx[i_part]=0;
				pcal_hy[i_part]=0;
				pcal_hz[i_part]=0;
				//		pcal_u1[i_part]=0;
				//		pcal_v1[i_part]=0;
				//		pcal_w1[i_part]=0;

				ecin_e[i_part]=0;
				ecout_e[i_part]=0;

				dc_sect[i_part]=0;
				tr_c1x[i_part]=0;
				tr_c1y[i_part]=0;
				tr_c1z[i_part]=0;
				tr_c3x[i_part]=0;
				tr_c3y[i_part]=0;
				tr_c3z[i_part]=0;
				tr_dcx[i_part]=0;
				tr_dcy[i_part]=0;
				tr_dcz[i_part]=0;
				tr_tofx[i_part]=0;
				tr_tofy[i_part]=0;
				tr_tofz[i_part]=0;
				tr_pcalx[i_part]=0;
				tr_pcaly[i_part]=0;
				tr_pcalz[i_part]=0;


				// ============================= Particle =============================
				px[i_part]=REC__Particle_px->getValue(i_part);
				py[i_part]=REC__Particle_py->getValue(i_part);
				pz[i_part]=REC__Particle_pz->getValue(i_part);
				vx[i_part]=REC__Particle_vx->getValue(i_part);
				vy[i_part]=REC__Particle_vy->getValue(i_part);
				vz[i_part]=REC__Particle_vz->getValue(i_part);
				pid[i_part]=REC__Particle_pid->getValue(i_part);
				beta[i_part]=REC__Particle_beta->getValue(i_part);
				charge[i_part]=REC__Particle_charge->getValue(i_part);
				status[i_part]=REC__Particle_status->getValue(i_part);
				chi2pid[i_part]=REC__Particle_chi2pid->getValue(i_part);

				if(charge[i_part]==-1 && status[i_part]>=2000 && status[i_part]<3000){charged_tracks++;}

				// =============================== HTCC ===============================
				for( int i_cc = 0; i_cc < REC__Cherenkov_detector->getLength(); i_cc++ ){
					if( REC__Cherenkov_detector->getValue(i_cc) == 15 ) {
						if( REC__Cherenkov_pindex->getValue(i_cc) == i_part ){
							ind_HTCC[i_part] = i_cc;
							nphe[i_part]=REC__Cherenkov_nphe->getValue(i_cc);
							htcc_time[i_part]=REC__Cherenkov_time->getValue(i_cc);
						}
					}
				}
				// =============================== FTOF ===============================
				dum_ftof=0;
				dum_ctof=0;
				for( int i_tof = 0; i_tof < REC__Scintillator_detector->getLength(); i_tof++ ){
					if( REC__Scintillator_detector->getValue(i_tof) == 12 ) {
						if( REC__Scintillator_pindex->getValue(i_tof) == i_part ){
							ind_FTOF[i_part] = i_tof;
							if(REC__Scintillator_layer->getValue(i_tof)==1){
								ftof_sect1[i_part]=REC__Scintillator_sector->getValue(i_tof);
								ftof_pad1[i_part]=REC__Scintillator_component->getValue(i_tof);
								ftof_time1[i_part]=REC__Scintillator_time->getValue(i_tof);
								ftof_path1[i_part]=REC__Scintillator_path->getValue(i_tof);
								ftof_x1[i_part]=REC__Scintillator_x->getValue(i_tof);
								ftof_y1[i_part]=REC__Scintillator_y->getValue(i_tof);
								ftof_z1[i_part]=REC__Scintillator_z->getValue(i_tof);
								dum_ftof=dum_ftof+100;
							}
							else if(REC__Scintillator_layer->getValue(i_tof)==2){
								ftof_sect2[i_part]=REC__Scintillator_sector->getValue(i_tof);
								ftof_pad2[i_part]=REC__Scintillator_component->getValue(i_tof);
								ftof_time2[i_part]=REC__Scintillator_time->getValue(i_tof);
								ftof_path2[i_part]=REC__Scintillator_path->getValue(i_tof);
								ftof_x2[i_part]=REC__Scintillator_x->getValue(i_tof);
								ftof_y2[i_part]=REC__Scintillator_y->getValue(i_tof);
								ftof_z2[i_part]=REC__Scintillator_z->getValue(i_tof);
								dum_ftof=dum_ftof+10;
							}
							else if(REC__Scintillator_layer->getValue(i_tof)==3){
								ftof_sect3[i_part]=REC__Scintillator_sector->getValue(i_tof);
								ftof_pad3[i_part]=REC__Scintillator_component->getValue(i_tof);
								ftof_time3[i_part]=REC__Scintillator_time->getValue(i_tof);
								ftof_path3[i_part]=REC__Scintillator_path->getValue(i_tof);
								ftof_x3[i_part]=REC__Scintillator_x->getValue(i_tof);
								ftof_y3[i_part]=REC__Scintillator_y->getValue(i_tof);
								ftof_z3[i_part]=REC__Scintillator_z->getValue(i_tof);
								dum_ftof=dum_ftof+1;
							}

						}
					}
					if( REC__Scintillator_detector->getValue(i_tof) == 4 ) {
						if( REC__Scintillator_pindex->getValue(i_tof) == i_part ){
							ind_CTOF[i_part] = i_tof;
							ctof_sect[i_part]=REC__Scintillator_sector->getValue(i_tof);
							ctof_pad[i_part]=REC__Scintillator_component->getValue(i_tof);
							ctof_time[i_part]=REC__Scintillator_time->getValue(i_tof);
							ctof_path[i_part]=REC__Scintillator_path->getValue(i_tof);
							ctof_x[i_part]=REC__Scintillator_x->getValue(i_tof);
							ctof_y[i_part]=REC__Scintillator_y->getValue(i_tof);
							ctof_z[i_part]=REC__Scintillator_z->getValue(i_tof);
							dum_ctof++;
						}
					}

				}

				// =============================== PCal, ECin, ECout ===============================
				for( int i_cal = 0; i_cal < REC__Calorimeter_detector->getLength(); i_cal ++ ){
					if( REC__Calorimeter_pindex->getValue(i_cal) == i_part ){
						if( REC__Calorimeter_layer->getValue(i_cal) == 1 ) {
							ind_PCal[i_part] = i_cal;
							pcal_e[i_part]=REC__Calorimeter_energy->getValue(i_cal);
							pcal_sect[i_part]=REC__Calorimeter_sector->getValue(i_cal);
							pcal_time[i_part]=REC__Calorimeter_time->getValue(i_cal);
							pcal_path[i_part]=REC__Calorimeter_path->getValue(i_cal);
							pcal_u[i_part]=REC__Calorimeter_lu->getValue(i_cal);
							pcal_v[i_part]=REC__Calorimeter_lv->getValue(i_cal);
							pcal_w[i_part]=REC__Calorimeter_lw->getValue(i_cal);
							pcal_x[i_part]=REC__Calorimeter_x->getValue(i_cal);
							pcal_y[i_part]=REC__Calorimeter_y->getValue(i_cal);
							pcal_z[i_part]=REC__Calorimeter_z->getValue(i_cal);
							pcal_hx[i_part]=REC__Calorimeter_hx->getValue(i_cal);
							pcal_hy[i_part]=REC__Calorimeter_hy->getValue(i_cal);
							pcal_hz[i_part]=REC__Calorimeter_hz->getValue(i_cal);
						} else if ( REC__Calorimeter_layer->getValue(i_cal) == 4 ) {
							ind_ECin[i_part] = i_cal;
							ecin_e[i_part]=REC__Calorimeter_energy->getValue(i_cal);
							//				ecin_u[i_part]=REC__Calorimeter_lu->getValue(i_cal);
							//				ecin_v[i_part]=REC__Calorimeter_lv->getValue(i_cal);
							//				ecin_w[i_part]=REC__Calorimeter_lw->getValue(i_cal);
							//				ecin_x[i_part]=REC__Calorimeter_x->getValue(i_cal);
							//				ecin_y[i_part]=REC__Calorimeter_y->getValue(i_cal);
							//				ecin_z[i_part]=REC__Calorimeter_z->getValue(i_cal);
						}  else if ( REC__Calorimeter_layer->getValue(i_cal) == 7 ) {
							ind_ECout[i_part] = i_cal;
							ecout_e[i_part]=REC__Calorimeter_energy->getValue(i_cal);
							//				ecout_u[i_part]=REC__Calorimeter_lu->getValue(i_cal);
							//				ecout_v[i_part]=REC__Calorimeter_lv->getValue(i_cal);
							//				ecout_w[i_part]=REC__Calorimeter_lw->getValue(i_cal);
							//				ecout_x[i_part]=REC__Calorimeter_x->getValue(i_cal);
							//				ecout_y[i_part]=REC__Calorimeter_y->getValue(i_cal);
							//				ecout_z[i_part]=REC__Calorimeter_z->getValue(i_cal);
						}
					}
				}
				// =============================== Track ===============================
				for( int i_tr = 0; i_tr < REC__Track_detector->getLength(); i_tr++ ){
					if( REC__Track_detector->getValue(i_tr) == 6 ) {
						if( REC__Track_pindex->getValue(i_tr) == i_part ){
							ind_Track[i_part] = i_tr;
							dc_sect[i_part]=REC__Track_sector->getValue(i_tr);
							chi2[i_part]=REC__Track_chi2->getValue(i_tr);
						}
					}
				}
				// ============================== Trajectory ===========================
				for( int i_trj = 0; i_trj < REC__Traj_detId->getLength(); i_trj++ ){
					if( REC__Traj_pindex->getValue(i_trj) == i_part ){
						//				printf("%d  %f\n",REC__Traj_detId->getValue(i_trj),REC__Traj_z->getValue(i_trj));
						if( REC__Traj_detId->getValue(i_trj) == 10 ) {
							tr_c1x[i_part]=REC__Traj_x->getValue(i_trj);
							tr_c1y[i_part]=REC__Traj_y->getValue(i_trj);
							tr_c1z[i_part]=REC__Traj_z->getValue(i_trj);
						}
						if( REC__Traj_detId->getValue(i_trj) == 34 ) {
							tr_c3x[i_part]=REC__Traj_x->getValue(i_trj);
							tr_c3y[i_part]=REC__Traj_y->getValue(i_trj);
							tr_c3z[i_part]=REC__Traj_z->getValue(i_trj);
						}
						if( REC__Traj_detId->getValue(i_trj) == 40 ) {
							tr_dcx[i_part]=REC__Traj_x->getValue(i_trj);
							tr_dcy[i_part]=REC__Traj_y->getValue(i_trj);
							tr_dcz[i_part]=REC__Traj_z->getValue(i_trj);
						}
						if( REC__Traj_detId->getValue(i_trj) == 44 ||  REC__Traj_detId->getValue(i_trj) == 45 ) {
							tr_tofx[i_part]=REC__Traj_x->getValue(i_trj);
							tr_tofy[i_part]=REC__Traj_y->getValue(i_trj);
							tr_tofz[i_part]=REC__Traj_z->getValue(i_trj);
						}
						if( REC__Traj_detId->getValue(i_trj) == 47 ) {
							tr_pcalx[i_part]=REC__Traj_x->getValue(i_trj);
							tr_pcaly[i_part]=REC__Traj_y->getValue(i_trj);
							tr_pcalz[i_part]=REC__Traj_z->getValue(i_trj);
						}
					}
				}
				//	}
		}
		// END first loop over i_part


		/*
		// Add RICH Hits & Clusters

		nrich=RICH__hits_id->getLength();
		//	cout<<event<<"  "<<RICH__hits_id->getLength()<<"  "<<RICH__newhits_id->getLength()<<"  "<<RICH__clusters_id->getLength()<<"   "<<RICH__newclusters_id->getLength()<<endl;
		for(int i_rich=0; i_rich<nrich; i_rich++){
		rich_id[i_rich]=RICH__hits_id->getValue(i_rich);
		rich_sector[i_rich]=RICH__hits_sector->getValue(i_rich);
		rich_tile[i_rich]=RICH__hits_tile->getValue(i_rich);
		rich_pmt[i_rich]=RICH__hits_pmt->getValue(i_rich);
		rich_anode[i_rich]=RICH__hits_anode->getValue(i_rich);
		rich_idx[i_rich]=RICH__hits_idx->getValue(i_rich);
		rich_idy[i_rich]=RICH__hits_idy->getValue(i_rich);
		rich_glx[i_rich]=RICH__hits_glx->getValue(i_rich);
		rich_gly[i_rich]=RICH__hits_gly->getValue(i_rich);
		rich_time[i_rich]=RICH__hits_time->getValue(i_rich);
		rich_cluster[i_rich]=RICH__hits_cluster->getValue(i_rich);
		rich_duration[i_rich]=RICH__hits_duration->getValue(i_rich);
		rich_xtalk[i_rich]=RICH__hits_xtalk->getValue(i_rich);
		}
		nricc=RICH__clusters_id->getLength();
		for(int i_ricc=0; i_ricc<nricc; i_ricc++){
		ricc_id[i_ricc]=RICH__clusters_id->getValue(i_ricc);
		ricc_size[i_ricc]=RICH__clusters_size->getValue(i_ricc);
		ricc_sector[i_ricc]=RICH__clusters_sector->getValue(i_ricc);
		ricc_tile[i_ricc]=RICH__clusters_tile->getValue(i_ricc);
		ricc_pmt[i_ricc]=RICH__clusters_pmt->getValue(i_ricc);
		ricc_charge[i_ricc]=RICH__clusters_charge->getValue(i_ricc);
		ricc_time[i_ricc]=RICH__clusters_time->getValue(i_ricc);
		ricc_x[i_ricc]=RICH__clusters_x->getValue(i_ricc);
		ricc_y[i_ricc]=RICH__clusters_y->getValue(i_ricc);
		ricc_z[i_ricc]=RICH__clusters_z->getValue(i_ricc);
		ricc_wtime[i_ricc]=RICH__clusters_wtime->getValue(i_ricc);
		ricc_wx[i_ricc]=RICH__clusters_wx->getValue(i_ricc);
		ricc_wy[i_ricc]=RICH__clusters_wy->getValue(i_ricc);
		ricc_wz[i_ricc]=RICH__clusters_wz->getValue(i_ricc);
		}
		// END Fill rich

		// Add NEW RICH Hits & Clusters
		new_nrich=RICH__newhits_id->getLength();
		for(int i_rich=0; i_rich<new_nrich; i_rich++){
		rich_newid[i_rich]=RICH__newhits_id->getValue(i_rich);
		rich_newsector[i_rich]=RICH__newhits_sector->getValue(i_rich);
		rich_newtile[i_rich]=RICH__newhits_tile->getValue(i_rich);
		rich_newpmt[i_rich]=RICH__newhits_pmt->getValue(i_rich);
		rich_newanode[i_rich]=RICH__newhits_anode->getValue(i_rich);
		rich_newidx[i_rich]=RICH__newhits_idx->getValue(i_rich);
		rich_newidy[i_rich]=RICH__newhits_idy->getValue(i_rich);
		rich_newglx[i_rich]=RICH__newhits_glx->getValue(i_rich);
		rich_newgly[i_rich]=RICH__newhits_gly->getValue(i_rich);
		rich_newtime[i_rich]=RICH__newhits_time->getValue(i_rich);
		rich_newcluster[i_rich]=RICH__newhits_cluster->getValue(i_rich);
		rich_newduration[i_rich]=RICH__newhits_duration->getValue(i_rich);
		rich_newxtalk[i_rich]=RICH__newhits_xtalk->getValue(i_rich);
		rich_newx[i_rich]=RICH__newhits_x->getValue(i_rich);
		rich_newy[i_rich]=RICH__newhits_y->getValue(i_rich);
		rich_newz[i_rich]=RICH__newhits_z->getValue(i_rich);
		}
		new_nricc=RICH__newclusters_id->getLength();
		for(int i_ricc=0; i_ricc<new_nricc; i_ricc++){
		ricc_newid[i_ricc]=RICH__newclusters_id->getValue(i_ricc);
		ricc_newsize[i_ricc]=RICH__newclusters_size->getValue(i_ricc);
		ricc_newsector[i_ricc]=RICH__newclusters_sector->getValue(i_ricc);
		ricc_newtile[i_ricc]=RICH__newclusters_tile->getValue(i_ricc);
		ricc_newpmt[i_ricc]=RICH__newclusters_pmt->getValue(i_ricc);
		ricc_newcharge[i_ricc]=RICH__newclusters_charge->getValue(i_ricc);
		ricc_newtime[i_ricc]=RICH__newclusters_time->getValue(i_ricc);
		ricc_newx[i_ricc]=RICH__newclusters_x->getValue(i_ricc);
		ricc_newy[i_ricc]=RICH__newclusters_y->getValue(i_ricc);
		ricc_newz[i_ricc]=RICH__newclusters_z->getValue(i_ricc);
		ricc_newwtime[i_ricc]=RICH__newclusters_wtime->getValue(i_ricc);
		ricc_newwx[i_ricc]=RICH__newclusters_wx->getValue(i_ricc);
		ricc_newwy[i_ricc]=RICH__newclusters_wy->getValue(i_ricc);
		ricc_newwz[i_ricc]=RICH__newclusters_wz->getValue(i_ricc);
}

r_nrich=REC__RICH_time->getLength();
for(int i_rich=0; i_rich<r_nrich; i_rich++){
	r_index[i_rich]=REC__RICH_index->getValue(i_rich);
	r_pindex[i_rich]=REC__RICH_pindex->getValue(i_rich);
	r_detector[i_rich]=REC__RICH_detector->getValue(i_rich);
	r_sector[i_rich]=REC__RICH_sector->getValue(i_rich);
	r_layer[i_rich]=REC__RICH_layer->getValue(i_rich);
	r_energy[i_rich]=REC__RICH_energy->getValue(i_rich);
	r_time[i_rich]=REC__RICH_time->getValue(i_rich);
	r_path[i_rich]=REC__RICH_path->getValue(i_rich);
	r_chi2[i_rich]=REC__RICH_chi2->getValue(i_rich);
	r_x[i_rich]=REC__RICH_x->getValue(i_rich);
	r_y[i_rich]=REC__RICH_y->getValue(i_rich);
	r_z[i_rich]=REC__RICH_z->getValue(i_rich);
	r_hx[i_rich]=REC__RICH_hx->getValue(i_rich);
	r_hy[i_rich]=REC__RICH_hy->getValue(i_rich);
	r_hz[i_rich]=REC__RICH_hz->getValue(i_rich);
	r_status[i_rich]=REC__RICH_status->getValue(i_rich);
}

r_nphotons=RICH__photons_hit_index->getLength();
for(int i_rich=0; i_rich<r_nphotons; i_rich++){
	r_hit_index[i_rich]=RICH__photons_hit_index->getValue(i_rich);
	r_type[i_rich]=RICH__photons_type->getValue(i_rich);
	r_start_time[i_rich]=RICH__photons_start_time->getValue(i_rich);
	r_migrad_time[i_rich]=RICH__photons_migrad_time->getValue(i_rich);
	r_hit_time[i_rich]=RICH__photons_hit_time->getValue(i_rich);
}
*/

//	if(npart>0 && charged_tracks>0 && RUN__config_trigger->getValue(0)&1==1){
if(npart>0 && charged_tracks>0 ){
	ht->Fill();
}
}
}
ht->Write();
c->Close();
return 0;
//----------------------------------------------------
}
//###### ENF OF GENERATED FILE #######

